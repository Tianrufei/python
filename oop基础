
(一)
class Role:
    def __init__(self, nm, wp):
        '构造器方法，创建实例时自动调用，经常用于设置实例属性'
        # 将属性绑定到实例，在类中任意位置可用
        self.name = nm
        self.weapon = wp

    def show_me(self):
        print('我是: %s，擅用%s' % (self.name, self.weapon))

if __name__ == '__main__':
    # 实例化时，自动调用__init__方法，实例自动作为第一个参数
    lb = Role('吕布', '方天画戟')
    print(lb.name)
    print(lb.weapon)
    zf = Role('张飞', '丈八蛇矛')
    print(zf.name)
    print(zf.weapon)
    lb.show_me()   # 调用方法，实例自动作为第一个参数传递
    zf.show_me()

(二)
class Weapon:
    def __init__(self, nm, type):
        self.wname = nm
        self.type = type

class Role:
    def __init__(self, nm, wp):
        self.name = nm
        self.weapon = wp

    def show_me(self):
        print('我是: %s，擅用%s' % (self.name, self.weapon))

if __name__ == '__main__':
    ji = Weapon('方天画戟', '物理攻击')
    lb = Role('吕布', ji)
    print(ji.wname, ji.type)
    print(lb.weapon.wname, lb.weapon.type)


(三)
class Role:
    def __init__(self, nm, wp):
        self.name = nm
        self.weapon = wp

    def show_me(self):
        print('我是: %s，擅用%s' % (self.name, self.weapon))

    def speak(self, word):
        # 没有绑定到实例身上的变量，就是函数的局部变量
        print(word)

class Warrior(Role):  # 括号中指定父类，父类也叫基类
    def attack(self, dst):
        print('攻击: %s' % dst)

class Mage(Role):
    pass

if __name__ == '__main__':
    lb = Warrior('吕布', '方天画戟')
    dc = Mage('貂蝉', '剑')
    lb.show_me()
    dc.show_me()
    lb.speak('人在塔在')
    lb.attack('董卓')


(四)
class A:
    def __init__(self, a, b, c, d):
        self.a = a
        self.b = b
        self.c = c
        self.d = d

class C(A):
    def __init__(self, a, b, c, d, e):
        # A.__init__(self, a, b, c, d)
        super(C, self).__init__(a, b, c, d)
        self.e = e

if __name__ == '__main__':
    c1 = C(10, 20, 30, 40, 5)
    print(c1.a, c1.e)
    

(五)    
class A:
    def funca(self):
        print('class a')

    def func1(self):
        print('aaaaaaaaaaaaaaa')

class B:
    def funcb(self):
        print('class b')

    def func1(self):
        print('bbbbbbbbbbbbbbbb')

class C(B, A):
    def funcc(self):
        print('class c')

    # def func1(self):
    #     print('ccccccccccccc')

if __name__ == '__main__':
    c1 = C()
    c1.funca()
    c1.funcb()
    c1.funcc()
    c1.func1()
    
    
    
